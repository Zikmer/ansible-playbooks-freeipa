---
- name: Configure ipa clients

  hosts: "{{ dynamic_inventory | default('ipa_client') }}"

  become: true

  vars:

    ipaclient_realm: "{{ ipaclient_domain | upper }}"
    ipaclient_mkhomedir: yes
    ipaclient_force_join: yes
    state: "{{ 'absent' if (ipaclient_uninstall | default('no') | bool) else 'present' }}"
    _freeipa_pki_certdir: "{{ freeipa_pki_certdir | default('/etc/pki/certs') }}"
    _freeipa_pki_keydir: "{{ freeipa_pki_keydir | default('/etc/pki/private') }}"
    _freeipa_pki_autogen: "{{ freeipa_pki_autogen | default('yes') }}"

  roles:

    - role: ipaclient
      when:
        - not 'ipa_server' in group_names
        - not 'ipa_replica' in group_names

  tasks:

    - block:

        - name: manage pki directories
          file:
            state: directory
            path: "{{ item }}"
          loop:
            - "{{ _freeipa_pki_certdir }}"
            - "{{ _freeipa_pki_keydir }}"

        - name: generate host certificate
          command: >
            ipa-getcert request -r
              -f {{ _freeipa_pki_certdir }}/{{ ansible_fqdn }}.crt
              -k {{ _freeipa_pki_keydir }}/{{ ansible_fqdn }}.key
          args:
            creates: "{{ _freeipa_pki_certdir }}/{{ ansible_fqdn }}.crt"
          tags:
            - getcert

        - name: link host certificate files
          file:
            state: link
            src: "{{ _freeipa_pki_certdir }}/{{ ansible_fqdn }}.crt"
            dest: "/etc/ipa/{{ ansible_fqdn }}.crt"
          register: cert_link
          retries: 2
          delay: 5
          until: cert_link is not failed

        - name: link host certificate keys
          file:
            state: link
            src: "{{ _freeipa_pki_keydir }}/{{ ansible_fqdn }}.key"
            dest: "/etc/ipa/{{ ansible_fqdn }}.key"
          register: cert_link
          retries: 2
          delay: 5
          until: cert_link is not failed

        - name: override krb defaults
          lineinfile:
            path: /etc/krb5.conf
            regexp: "^( *{{ item.setting }} *= *).*"
            line: '\1{{ item.value }}'
            backrefs: yes
            insertafter: "[libdefaults]"
          loop_control:
            label: "{{ item.setting }}"
          loop: "{{ ipaclient_krb_overrides | default([]) }}"

        - name: enable ssh password authentication
          lineinfile:
            path: /etc/ssh/sshd_config
            regexp: "^PasswordAuthentication .*"
            line: "PasswordAuthentication {{ ssh_password_auth }}"
          vars:
            ssh_password_auth: "{{ 'yes' if (ipaclient_ssh_login_password_enable | default('no') | bool) else 'no' }}"
          when: ipaclient_ssh_password_login_manage | default('no') | bool
          notify: restart ssh

        - name: restart sssd
          service:
            name: sssd
            state: restarted

      when:
        - not (ipaclient_uninstall | default('no') | bool)
        - _freeipa_pki_autogen | bool
        - not 'ipa_server' in group_names
        - not 'ipa_replica' in group_names
      tags:
        - pki

  handlers:

    - name: restart ssh
      service:
        name: sshd
        state: restarted
